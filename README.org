* Lister - Yet Another List Printer for Emacs

=Lister= is a library for creating interactive "lists" of any kind. In
contrast to similar packages like =hierarchy.el= or =tablist.el=, it
aims at /not/ simply mapping a data structure to a navigatable list.
Rather, it treats the list like emacs treats buffers: It is an empty
space to which you can successively add stuff. So in emacs lingo,
=lister= should be rather called =listed= - it is a library for
/editing/ lists, instead of displaying them.

The advantage of this approach is that you don't have to know in advance
the structure of your data. You just "insert" a new slice on the fly
when you need it.

To my knowledge, =lister= is currently only used by =delve.el=, another
project of mine. =Delve= is a good usecase for working with lists
lister-style: You navigate your =org-roam= Zettelkasten by following the
links of each page. These links, however, do quickly become cyclic:
One page links to another, and that one links back to the first one.
With lister, these cycles are no problem. The user just inserts
another sublist at point if he or she wants to dive a bit deeper into
the structure of a Zettelkasten page.

* Contents                                                         :noexport:
:PROPERTIES:
 :TOC:      :include siblings
:END:

:CONTENTS:
- [[#project-status][Project status]]
- [[#design-and-basic-features][Design and Basic Features]]
  - [[#design-principles][Design Principles]]
  - [[#additional-features][Additional Features]]
  - [[#speed-issues][Speed issues]]
- [[#keymap][Keymap]]
- [[#using-lister-programmatically][Using Lister Programmatically]]
  - [[#simple-example][Simple example]]
  - [[#doing-something-with-an-item][Doing something with an item]]
  - [[#overriding-lister-mode][Overriding lister mode]]
  - [[#lister-highlight-mode][Lister highlight mode]]
  - [[#further-examples][Further examples]]
- [[#functions-and-variables][Functions and Variables]]
  - [[#some-conventions][Some Conventions]]
  - [[#basic-setup][Basic Setup]]
  - [[#editing-plain-lists][Editing plain lists]]
  - [[#editing-hierarchical-lists][Editing hierarchical lists]]
  - [[#navigation][Navigation]]
  - [[#accessing-the-data][Accessing the data]]
  - [[#marking--unmarking][Marking / unmarking]]
  - [[#editing-the-list][Editing the list]]
  - [[#sorting-the-list][Sorting the list]]
  - [[#walking-the-list][Walking the list]]
  - [[#filtering][Filtering]]
  - [[#cursor-sensor-functions][Cursor sensor functions]]
  - [[#low-level-functions][Low-level functions]]
- [[#changelog][Changelog]]
  - [[#changes-to-the-current-version-no-new-release][Changes to the current version (no new release)]]
  - [[#06][0.6]]
  - [[#05][0.5]]
:END:

* Project status

Current stable release is =0.6=. 

| Feature                                    | State  | Automated tests? |
|--------------------------------------------+--------+------------------|
| build simple or large lists                | stable | yes              |
| build nested lists                         | stable | yes              |
| retrieve data, possibly with hierarchies   | stable | yes              |
| walk the list                              | stable | yes              |
| provide API for marking or unmarking items | stable | yes              |
| use cursor sensor functions                | stable | yes              |
| filter items                               | works  | yes              |
|--------------------------------------------+--------+------------------|


* Design and Basic Features

** Design Principles

- A "list" is a collection of printed items. The items do not have to be
  of the same size. The data associated with the item is stored as a
  text property.
- Every item is printed using a buffer local mapper function, which
  maps the associated data to a list of printable lines. It is
  possible to add a margins to each item.
- Each item has its own "indentation level", making it possible to
  print and operate on nested lists ("sublists"). High-level
  operations, such as sorting, respect these sublists.
- Navigation is done using Emacs' regular navigation commands. Each
  printed item is inserted with a cursor gap, on which alone point can
  rest. (The rest of the item is marked as intangible.)
- For the sake of speed, there is a buffer local list of marker
  positions to keep track of each item (=lister-local-marker-list=). So
  jumping to an item is as fast as jumping to the associated marker. If
  you move a list item, the marker will be moved with it.
- On entering or leaving an item, hooks are run. This is showcased
  with a minor mode which highlights the item at point and, of course,
  removes the highlighting on leaving it (=lister-highlight-mode=).

** Additional Features

- The list can have a static header or a footer.
- In =lister-mode=, using isearch works out of the box.
- Items can be marked and unmarked. There are helper functions to
  easily do something with these marked items (e.g.
  =lister-walk-marked-items=).
- There is a filter mechanism to visually hide items.
- You can sort a list, including its sublists.
- Items can be moved and indented. (Remember: It's all about /editing/
  lists.)

** Speed issues

=Lister= relies heavily on text properties and on keeping a buffer local
list with markers. My experience is that after a certain threshhold,
having a buffer with that many text properties makes cursoe movement
slow and uncomfortable to use. For me, this limit is at around 1.000
items, but that will most certainly depend on you hardware and
software configuration.

So if you expect your list to have regularly more than 750 items or
so, you should not use =lister=.

* Keymap

=lister-mode= implements a keymap (=lister-mode-map=). It covers the
following keys:

| Key             | Description                                      |
|-----------------+--------------------------------------------------|
| <ENTER>         | Call =lister-local-action= with the item at point. |
| n, p            | Move one line down or up.                        |
| m               | Toggle mark, or with prefix whole sublist.       |
| *               | Mark all items.                                  |
| u               | Unmark all items.                                |
| M-up, M-down    | Move item at point up or down                    |
| M-left, M-right | Change indentation of item at point              |
|-----------------+--------------------------------------------------|

Note that the marking commands respect =lister-local-marking-predicate=,
which see.

* Using Lister Programmatically
** Simple example

#+BEGIN_SRC emacs-lisp
  (let* ((buf (generate-new-buffer "*LISTER*")))
    (lister-setup buf 
                  #'list ;; mapper-fn
          '("3" "4" "5" "6") ;; initial data
          "This is my list:" ;; header
          "This is the end of the list") ;; footer
    (lister-goto buf :first) ;; move to first item
    (lister-insert buf :point "2")
    (lister-insert buf :point "1")
    (switch-to-buffer buf))               
#+END_SRC

This little program yields:

#+BEGIN_EXAMPLE
    This is my list:
    1
    2
    3
    4
    5
    6
    This is the end of the list
#+END_EXAMPLE

** Doing something with an item

If you press on an item, the function =lister-local-action= is called
with the associated data as its sole argument. So if you want something
to happen, bind this buffer local variable to something useful. Toy
example:

#+BEGIN_SRC emacs-lisp
  (defun my-action (data)
     (message "You just pressed enter on the item %s." data))

  ;; install the action somewhere after you set up the buffer:
  (with-current-buffer the-lister-buffer
    (setq lister-local-action #'my-action))
#+END_SRC

** Overriding lister mode

You must take care if derive your own major mode from =lister mode=. You
need to call =lister-setup= to initialize the buffer, yet this function
also turns on lister mode. This would interfere with your program
trying to turn on its own major mode.

Thus there is an optional argument telling =lister-setup= to /not/ turn on
=lister mode=:

#+BEGIN_SRC emacs-lisp
  (define-derived-mode some-mode
    lister-mode "something"
    "Some description of your own major mode."
    ;; Setup lister, but don't set the major mode:
    (lister-setup (current-buffer) 
          #'some-mode--mapper-fn
          nil
          nil ;; header
          nil ;; footer
          nil ;; filter
          t   ;; no major-mode <--- !!!
          )
    ;; Now add mode specific stuff:
    (setq-local lister-local-action #'some-mode-action)) 
#+END_SRC

** Lister highlight mode

Turning on this minor mode turns on highlighting of the item at point.

#+begin_src emacs-lisp
(require 'lister-highlight)

;; turn on the minor mode:
(with-current-buffer lister-buf
  (lister-highlight-mode))
 #+end_src

The highlighting is done adding =lister-highlight-face-or-property= on
the item. You can set this to a face spec or to the name of an
existing face.

** Further examples

=Lister= is shipped with an extensive suite of =buttercup= tests. Thus see
=lister-tests.el= for further examples of how to use a function.

=Delve=, which is also hosted on githin, uses =lister=. 

* Functions and Variables

A short list of the most important functions and variables -- have a
look at the documentation strings if you want to know more:

** Some Conventions

 - The =lister= buffer is set up using quite some buffer local
   variables. All of these variables are prefixed with =lister-local=
   (e.g., =lister-local-marker-list=).
 - The first argument is usually the lister buffer object. It cannot
   be omitted; even the current buffer has to be passed explicitly.
 - All argument variables usually also express a type. Thus =lister-buf=
   must be a buffer set up as a lister buffer. Common argument names
   are =marker-or-pos= (implying that one can either pass a marker or an
   integer); or =pos-or-symbol= (meaning that one can pass a marker, an
   integer or a symbol =:last=, =:point=, =:first=). Many commands which
   work on a position (such as =lister-goto= or =lister-remove=) use this
   latter type, making possible expressions such as =(lister-goto buf
   :first)=.

** Basic Setup

| Function          | Purpose                                                  |
|-------------------+----------------------------------------------------------|
| lister-setup      | Initialize a buffer and turn on "lister-mode".           |
| lister-set-list   | Replace current list with another (possibly empty) list. |
| lister-set-header | Set a header on top of the list.                         |
| lister-set-footer | Set a footer at the end of the list.                     |
|-------------------+----------------------------------------------------------|

** Editing plain lists

| Function               | Purpose                                      |
|------------------------+----------------------------------------------|
| lister-insert          | Insert a single item                         |
| lister-insert-sequence | Insert a sequence (list) of items            |
| lister-add             | Add a single item to the end of the list     |
| lister-add-sequence    | Add a sequence (list) to the end of the list |
| lister-remove          | Remove an item                               |
| lister-replace         | Replace an item with another one             |
| lister-replace-list    | Replace a whole part of a list               |
|------------------------+----------------------------------------------|

Each command dealing with a single item usually accept many different
types of positions (markers, integers, symbol). They also call the
cursor sensor callbacks. If you use several of these commands in a
row, wrap them in =lister-with-locked-cursor= to avoid calling the
sensor functions after each single step.

Inserting sequences is optimized for speed, so it might be useful to
first build a list and then insert it in one rush.

** Editing hierarchical lists

All =-sequence= commands also accept nested sequences (lists), which
result in indented lists (i.e., hierarchies). Indentation is visually
indicated by prepending a single space per indentation level. A list
which is indented relative to their surrounding items is called a
"sublist". Thus if you open a node in a normal hierarchical list, in
lister, a sublist will be inserted.

There are special functions for dealing with sublists:

| Function                    | Description                                                      |
|-----------------------------+------------------------------------------------------------------|
| lister-insert-sublist-below | Insert a sequence (list) below an item, with indentation         |
| lister-sublist-below-p      | Check if there is a sublist below this item.                     |
| lister-remove-this-level    | Remove all items with the indentation level of an item           |
| lister-remove-sublist-below | Remove all items below the current items with higher indentation |
| lister-sublist-boundaries   | Determine the boundaries of the sublist at pos.                  |
| lister-get-all-data-tree    | Return the current list as an hierachical list.                  |
|-----------------------------+------------------------------------------------------------------|

** Navigation

The usual navigation functions work, since all items are exposed to
emacs using a cursor gap.

 =lister-goto= is your main entry point for positioning the cursor from
within the program; it takes care of the cursor sensor functions.
Don't use =goto-char= unless you know what you do. =lister-goto= accepts
many different types of arguments, such as markers, integer positions
or meaningful symbols such as =:last, =:first= or =:point=.

For more complex navigation operations, wrap the calls within
=lister-with-locked-cursor=. This macro saves point and intelligently
re-sets the cursor to the same line after executing body.

 | Function                  | Purpose                                                  |
 |---------------------------+----------------------------------------------------------|
 | lister-goto               | Goto a position                                          |
 | lister-with-locked-cursor | MACRO: Execute BODY and restore line position afterwards |
 |---------------------------+----------------------------------------------------------|

 | Variable            | Purpose                                  |
 |---------------------+------------------------------------------|
 | lister-local-action | This  fn is called when pressing <ENTER> |
 |---------------------+------------------------------------------|


** Accessing the data

| Function                 | Purpose                                                |
|--------------------------+--------------------------------------------------------|
| lister-get-data          | Get the data of an item                                |
| lister-set-data          | Change the data of an item                             |
| lister-get-all-data      | Get all data (disregarding indentation) as a flat list |
| lister-get-all-data-tree | Get all data as a tree, respecting indentation         |
|--------------------------+--------------------------------------------------------|

Both the results of  =lister-get-all-data= and =lister-get-all-data-tree=
can be further refined by specifiyng item boundaries.

** Marking / unmarking

Every item can be 'marked'. Note that 'mark', in =lister=, is thus an
ambiguous term: It might refer to the /state/ of an item, being marked
or unmarked; or to the /position/ of the item, usually represented by a
marker. I'm happy about any suggestion for a better semantics.

Before any marking command is being done, =lister= checks if the item at
point can be marked at all. This is determined using
=lister-local-marking-predicate=. This makes it easy to restrict all
marking to only items with a specific data type.

| Variable                       | Description                                        |
|--------------------------------+----------------------------------------------------|
| lister-mark-face-or-property   | Face to visually indicate that an item is 'marked' |
| lister-local-marking-predicate | Predicate defining what item can be marked or not  |
|--------------------------------+----------------------------------------------------|

All the following functions respect =lister-local-marking-predicate=:

| Function                  | Description                                                 |
|---------------------------+-------------------------------------------------------------|
| lister-get-mark-state     | Return the 'mark state' of the item.                        |
| lister-display-mark-state | Update the display of the 'mark state' of the item.         |
| lister-all-marked-items   | Return the positions of all marked items.                   |
| lister-all-marked-data    | Return the data of all marked items.                        |
| lister-mark-item          | Mark a single item (or unmark it).                          |
| lister-mark-some-items    | Mark or unmark a list of items.                             |
| lister-mark-all-items     | Now guess what!?                                            |
| lister-mark-this-sublist  | Mark or unmark all items belonging to the sublist at point. |
| lister-walk-marked-items  | Do something with each marked item.                         |
|---------------------------+-------------------------------------------------------------|

** Editing the list

| Function               | Description                            |
|------------------------+----------------------------------------|
| lister-move-item-up    | Move item at POS one up, if possible   |
| lister-move-item-down  | Move item at POS one down, if possible |
| lister-move-item-left  | Unindent item at POS one level         |
| lister-move-item-right | Indent item at POS one level           |
|------------------------+----------------------------------------|

** Sorting the list

| Function               | Description                            |
|------------------------+----------------------------------------|
| lister-sort-list       | Sort the list according to a predicate |
| lister-sort-this-level | Sort the sublist at pos                |
|------------------------+----------------------------------------|

Sorting also sorts the sublists.

Sorting respects sublist hierarchies. If the new sorting order forces
a top level item to be moved, the sublist moves with it. 

The range to to be sorted can be restricted by specifiying boundaries
(like a region).

** Walking the list

| Function                 | Description                                                       |
|--------------------------+-------------------------------------------------------------------|
| lister-walk-some         | Do something on each item on the list passed (list of positions). |
| lister-walk-all          | Do something on each item.                                        |
| lister-walk-marked-items | Do something with each marked item.                               |
|--------------------------+-------------------------------------------------------------------|

** Filtering

A filter is a function which receives one argument, the item's data.
If this filter function returns a non-nil value, the item will be
displayed, else it will be hidden. Think of it parallel to
=seq-filter=.

If a filter is set, subsequent insertions will honor the filter; i.e.,
newly inserted items will only be visible if they match the filter.

| Function          | Description                   |
|-------------------+-------------------------------|
| lister-set-filter | Set or remove filter function |
|-------------------+-------------------------------|


** Cursor sensor functions

=lister= uses =cursor-sensor-mode=. An event is caused by every /entering/
or /leaving/ an item. All common operations take care of this, that is,
these sensor functions are only called once, and only /after/ the
operation is done. See =lister-with-locked-cursor= for some details. The
minor mode =lister-highlight= (shipped with this mode) uses sensor
functions to highlight the item at point.

Sensor functions *must not* be added via =add-hook= and friends. Instead,
use the homegrown functions:

| Function                             | Description                                                   |
|--------------------------------------+---------------------------------------------------------------|
| lister-add-enter-callback            | Add callback function for the event 'entering the item'       |
| lister-add-leave-callback            | Add callback function for the event 'leaving the item'        |
| lister-remove-{enter/leave}-callback | Remove callback for the corresponding event                   |
| lister-sensor-{enter/leave}          | Manually trigger the callback functions for the corresponding |
|--------------------------------------+---------------------------------------------------------------|

** Low-level functions

Some of the most useful low-level functions:

| Function                      | Description                                            |
|-------------------------------+--------------------------------------------------------|
| lister-end-of-lines           | Return the next cursor gap position /after/ an item      |
| lister-item-p                 | Check if point is on an item                           |
| lister-items-in-region        | Return a list of all items within specified boundaries |
| lister-with-normalized-region | Macro for working with boundaries                      |
| lister-with-sublist-at        | Macro for working with sublists                        |
|-------------------------------+--------------------------------------------------------|


* Changelog
** Changes to the current version (no new release)

** 0.6

 + Add sorting
 + Add keys to move items up and down, to indent and unindent.
 + Bugfixes
 + Simplified code base

** 0.5
 + Simplified filtering.
 + Extend the documentation.
 + /Quite/ some internal cleanup of the code base.
 + Use =org-make-toc= for the README.org


# Local Variables:
# eval: (require 'org-make-toc)
# before-save-hook: org-make-toc
# org-export-with-properties: ()
# org-export-with-title: t
# End:
